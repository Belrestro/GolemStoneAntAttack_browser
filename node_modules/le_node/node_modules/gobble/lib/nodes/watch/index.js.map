{"version":3,"file":"index.js","sources":["../../../../../../src/nodes/watch/index.js"],"sourcesContent":["import { copydir, rimraf, Promise } from 'sander';\nimport cleanup from '../../utils/cleanup';\nimport session from '../../session';\nimport GobbleError from '../../utils/GobbleError';\nimport flattenSourcemaps from '../../utils/flattenSourcemaps';\n\nexport default function watch ( node, options ) {\n\tif ( !options || !options.dest ) {\n\t\tthrow new GobbleError({\n\t\t\tcode: 'MISSING_DEST_DIR',\n\t\t\ttask: 'watch'\n\t\t});\n\t}\n\n\tconst gobbledir = require( 'path' ).resolve( options.gobbledir || process.env.GOBBLE_TMP_DIR || '.gobble-watch' );\n\tconst task = session.create({ gobbledir });\n\n\tlet watchTask;\n\n\ttask.resume = n => {\n\t\tnode = n;\n\t\twatchTask = node.createWatchTask();\n\n\t\twatchTask.on( 'info', details => task.emit( 'info', details ) );\n\t\twatchTask.on( 'error', err => task.emit( 'error', err ) );\n\n\t\tlet buildStart;\n\t\twatchTask.on( 'build:start', () => buildStart = Date.now() );\n\n\t\twatchTask.on( 'build:end', dir => {\n\t\t\tconst dest = options.dest;\n\n\t\t\trimraf( dest )\n\t\t\t\t.then( () => copydir( dir ).to( dest ) )\n\t\t\t\t.then( () => {\n\t\t\t\t\tconst sourcemapProcessStart = Date.now();\n\n\t\t\t\t\ttask.emit( 'info', {\n\t\t\t\t\t\tcode: 'SOURCEMAP_PROCESS_START',\n\t\t\t\t\t\tprogressIndicator: true\n\t\t\t\t\t});\n\n\t\t\t\t\treturn flattenSourcemaps( dir, dest, dest, task ).then( () => {\n\t\t\t\t\t\ttask.emit( 'info', {\n\t\t\t\t\t\t\tcode: 'SOURCEMAP_PROCESS_COMPLETE',\n\t\t\t\t\t\t\tduration: Date.now() - sourcemapProcessStart\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\ttask.emit( 'info', {\n\t\t\t\t\t\t\tcode: 'BUILD_COMPLETE',\n\t\t\t\t\t\t\tduration: Date.now() - buildStart,\n\t\t\t\t\t\t\twatch: true\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t\t.then( () => task.emit( 'built', dest ) )\n\t\t\t\t.catch( err => task.emit( 'error', err ) );\n\t\t});\n\t};\n\n\ttask.close = () => {\n\t\twatchTask.close();\n\t\tsession.destroy();\n\n\t\treturn Promise.resolve(); // for consistency with serve task\n\t};\n\n\ttask.pause = () => {\n\t\tif ( watchTask ) {\n\t\t\twatchTask.close();\n\t\t}\n\n\t\twatchTask = null;\n\t\treturn cleanup( gobbledir );\n\t};\n\n\tcleanup( gobbledir ).then(\n\t\t() => task.resume( node ),\n\t\terr => task.emit( 'error', err )\n\t);\n\n\treturn task;\n}\n"],"names":[],"mappings":"AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAAA,qBAAA;AAAA,SAAA,MAAA,MAEe,SAFf;;AAQA,EAAA,MAAA,IARA,sBAQA,CAAA;AACA,GAAA,MAAA;AACA,GAAA,MAAA;AACA;AACA;;AAEA,CAAC,IAAD,YAAA,QAAA,QAAA,QAAA,QAAA,aAAA,QAAA,IAAA,kBAAA;AACA,CAAA,IAAA,OAfA,kBAeA,CAAA,OAAA,EAAA,WAAA;;AAEA,CAAA,IAAA,YAAA;;AAEA,CAAC,KAAD,SAAA,UAAA,GAAA;AACA,EAAA,OAAA;AACA,EAAA,YAAA,KAAA;;AAEA,EAAA,UAAA,GAAA,QAAA,UAAA,SAAA;AACA,GAAA,OAAA,KAAA,KAAA,QAAA;AACA;AACA,EAAA,UAAA,GAAA,SAAA,UAAA,KAAA;AACA,GAAA,OAAA,KAAA,KAAA,SAAA;AACA;;;AAGA,EAAA,UAAA,GAAA,eAAA,YAAA;AACA,GAAA,OAAA,aAAA,KAAA;AACA;;AAEA,EAAE,UAAF,GAAA,aAAA,UAAA,KAAA;AACA,GAAA,IAAA,OAAA,QAAA;;AAEA,GAtCA,aAsCS,CAAT,MAAA,KAAA,YAAA;AACA,IAAA,OAvCA,cAuCA,CAAA,KAAA,GAAA;;AAEA,IAAA,IAAA,wBAAA,KAAA;;;AAGA,KAAA,MAAW;AACX,KAAA,mBAAA;AACA;;WA9CA;AAiDA,KAAA,KAAA,KAAA,QAAA;AACA,MAAA,MAAA;AACA,MAAA,UAAA,KAAA,QAAA;AACA;;AAEA,KAAA,KAAA,KAAA,QAAA;AACA,MAAA,MAAY;AACZ,MAAA,UAAA,KAAA,QAAA;;AAEA;AACA;AACA,MAAA,KAAA,YAAA;;AAEA,MAAA,SAAA,UAAA,KAAA;AACA,IAAA,OAAA,KAAA,KAAA,SAAA;AACA;AACA;AACA;;AAEA,CAAA,KAAA,QAAA,YAAA;AACA,EAAE,UAAF;AACA,EAtEA,kBAsEA,CAAU;;SAtEV;AAyEA;;;AAGA,EAAE,IAAF,WAAA;AACA,GAAA,UAAA;AACA;;AAEA,EAAA,YAAA;AACA,EAAA,OAjFA,kBAiFA,CAAA;AACA;;AAEA,CApFA,kBAoFA,CAAS,WAAT,KAAyB,YAAzB;AACA,EAAA,OAAS,KAAT,OAAA;AACA,IAAA,UAAA,KAAA;;AAEA;;AAEA,CAAA,OAAA;AACA"}