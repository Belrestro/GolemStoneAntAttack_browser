'use strict';

var sander = require('sander');
var cleanup = require('../../utils/cleanup');
var session = require('../../session');
var GobbleError = require('../../utils/GobbleError');
var flattenSourcemaps = require('../../utils/flattenSourcemaps');



exports['default'] = watch;
function watch(node, options) {
	if (!options || !options.dest) {
		throw new GobbleError['default']({
			code: "MISSING_DEST_DIR",
			task: "watch"
		});
	}

	var gobbledir = require("path").resolve(options.gobbledir || process.env.GOBBLE_TMP_DIR || ".gobble-watch");
	var task = session['default'].create({ gobbledir: gobbledir });

	var watchTask = undefined;

	task.resume = function (n) {
		node = n;
		watchTask = node.createWatchTask();

		watchTask.on("info", function (details) {
			return task.emit("info", details);
		});
		watchTask.on("error", function (err) {
			return task.emit("error", err);
		});

		var buildStart = undefined;
		watchTask.on("build:start", function () {
			return buildStart = Date.now();
		});

		watchTask.on("build:end", function (dir) {
			var dest = options.dest;

			sander.rimraf(dest).then(function () {
				return sander.copydir(dir).to(dest);
			}).then(function () {
				var sourcemapProcessStart = Date.now();

				task.emit("info", {
					code: "SOURCEMAP_PROCESS_START",
					progressIndicator: true
				});

				return flattenSourcemaps['default'](dir, dest, dest, task).then(function () {
					task.emit("info", {
						code: "SOURCEMAP_PROCESS_COMPLETE",
						duration: Date.now() - sourcemapProcessStart
					});

					task.emit("info", {
						code: "BUILD_COMPLETE",
						duration: Date.now() - buildStart,
						watch: true
					});
				});
			}).then(function () {
				return task.emit("built", dest);
			})["catch"](function (err) {
				return task.emit("error", err);
			});
		});
	};

	task.close = function () {
		watchTask.close();
		session['default'].destroy();

		return sander.Promise.resolve(); // for consistency with serve task
	};

	task.pause = function () {
		if (watchTask) {
			watchTask.close();
		}

		watchTask = null;
		return cleanup['default'](gobbledir);
	};

	cleanup['default'](gobbledir).then(function () {
		return task.resume(node);
	}, function (err) {
		return task.emit("error", err);
	});

	return task;
}
//# sourceMappingURL=index.js.map
