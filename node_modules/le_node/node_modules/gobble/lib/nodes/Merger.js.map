{"version":3,"file":"Merger.js","sources":["../../../../src/nodes/Merger.js"],"sourcesContent":["import { join, resolve, sep } from 'path';\nimport {\n\tlstat,\n\tmkdir,\n\tmkdirSync,\n\treaddir,\n\treaddirSync,\n\trealpathSync,\n\trimrafSync,\n\tstat,\n\tsymlinkOrCopy,\n\tsymlinkOrCopySync,\n\tunlink,\n\tunlinkSync,\n\tPromise\n} from 'sander';\nimport * as mapSeries from 'promise-map-series';\nimport Node from './Node';\nimport session from '../session';\nimport uid from '../utils/uid';\nimport { ABORTED } from '../utils/signals';\n\nfunction mergeDirectories ( src, dest ) {\n\treturn stat( dest ).then( stats => {\n\t\tif ( stats.isDirectory() ) {\n\t\t\t// If it's a symlinked dir, we need to convert it to a real dir.\n\t\t\t// Suppose linked-foo/ is a symlink of foo/, and we try to copy\n\t\t\t// the contents of bar/ into linked-foo/ - those files will end\n\t\t\t// up in foo, which is definitely not what we want\n\t\t\treturn lstat( dest )\n\t\t\t\t.then( stats => {\n\t\t\t\t\tif ( stats.isSymbolicLink() ) {\n\t\t\t\t\t\treturn convertToRealDir( dest );\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.then( () => {\n\t\t\t\t\treturn readdir( src ).then( files => {\n\t\t\t\t\t\tconst promises = files.map( filename =>\n\t\t\t\t\t\t\tmergeDirectories( src + sep + filename, dest + sep + filename )\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturn Promise.all( promises );\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t}\n\n\t\t// exists, and is file - overwrite\n\t\treturn unlink( dest ).then( link );\n\t}, link ); // <- failed to stat, means dest doesn't exist\n\n\tfunction link () {\n\t\treturn symlinkOrCopy( src ).to( dest );\n\t}\n}\n\n// TODO make this async\nfunction convertToRealDir ( symlinkPath ) {\n\tconst originalPath = realpathSync( symlinkPath );\n\n\tunlinkSync( symlinkPath );\n\tmkdirSync( symlinkPath );\n\n\treaddirSync( originalPath ).forEach( filename => {\n\t\tsymlinkOrCopySync( originalPath, filename ).to( symlinkPath, filename );\n\t});\n}\n\nexport default class Merger extends Node {\n\tconstructor ( inputs, options ) {\n\t\tsuper();\n\n\t\tthis.inputs = inputs;\n\t\tthis.id = uid( ( options && options.id ) || 'merge' );\n\t}\n\n\tready () {\n\t\tlet aborted;\n\t\tlet index;\n\t\tlet outputdir;\n\n\t\tif ( !this._ready ) {\n\t\t\tthis._abort = () => {\n\t\t\t\t// allows us to short-circuit operations at various points\n\t\t\t\taborted = true;\n\t\t\t\tthis._ready = null;\n\t\t\t};\n\n\t\t\tindex = this.counter++;\n\t\t\toutputdir = resolve( session.config.gobbledir, this.id, '' + index );\n\n\t\t\tthis._ready = mkdir( outputdir ).then( () => {\n\t\t\t\tlet start;\n\t\t\t\tlet inputdirs = [];\n\n\t\t\t\treturn mapSeries( this.inputs, function ( input, i ) {\n\t\t\t\t\tif ( aborted ) throw ABORTED;\n\t\t\t\t\treturn input.ready().then( inputdir => inputdirs[i] = inputdir );\n\t\t\t\t}).then( () => {\n\t\t\t\t\tstart = Date.now();\n\n\t\t\t\t\tthis.emit( 'info', {\n\t\t\t\t\t\tcode: 'MERGE_START',\n\t\t\t\t\t\tid: this.id,\n\t\t\t\t\t\tprogressIndicator: true\n\t\t\t\t\t});\n\n\t\t\t\t\treturn mapSeries( inputdirs, inputdir => {\n\t\t\t\t\t\tif ( aborted ) throw ABORTED;\n\t\t\t\t\t\treturn mergeDirectories( inputdir, outputdir );\n\t\t\t\t\t});\n\t\t\t\t}).then( () => {\n\t\t\t\t\tif ( aborted ) throw ABORTED;\n\n\t\t\t\t\tthis._cleanup( index );\n\n\t\t\t\t\tthis.emit( 'info', {\n\t\t\t\t\t\tcode: 'MERGE_COMPLETE',\n\t\t\t\t\t\tid: this.id,\n\t\t\t\t\t\tduration: Date.now() - start\n\t\t\t\t\t});\n\n\t\t\t\t\treturn outputdir;\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\treturn this._ready;\n\t}\n\n\tstart () {\n\t\tif ( this._active ) return;\n\t\tthis._active = true;\n\n\t\tthis._oninvalidate = changes => {\n\t\t\tthis._abort( changes );\n\t\t\tthis.emit( 'invalidate', changes );\n\t\t};\n\n\t\tthis._oninfo = details => this.emit( 'info', details );\n\n\t\tthis.inputs.forEach( input => {\n\t\t\tinput.on( 'invalidate', this._oninvalidate );\n\t\t\tinput.on( 'info', this._oninfo );\n\n\t\t\tinput.start();\n\t\t});\n\t}\n\n\tstop () {\n\t\tthis.inputs.forEach( input => {\n\t\t\tinput.off( 'invalidate', this._oninvalidate );\n\t\t\tinput.off( 'info', this._oninfo );\n\n\t\t\tinput.stop();\n\t\t});\n\n\t\tthis._active = false;\n\t}\n\n\tactive () {\n\t\treturn this._active;\n\t}\n\n\t_cleanup ( index ) {\n\t\tconst dir = join( session.config.gobbledir, this.id );\n\n\t\t// Remove everything except the last successful output dir.\n\t\t// Use readdirSync to eliminate race conditions\n\t\treaddirSync( dir )\n\t\t\t.filter( file => file !== '.cache' && ( +file < index ) )\n\t\t\t.forEach( file => rimrafSync( dir, file ) );\n\t}\n\n\t_findCreator ( filename ) {\n\t\tlet i = this.inputs.length;\n\t\tlet node;\n\n\t\twhile ( i-- ) {\n\t\t\tnode = this.inputs[i];\n\t\t\tif ( node._findCreator( filename ) ) {\n\t\t\t\treturn node;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n}\n"],"names":[],"mappings":"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"}