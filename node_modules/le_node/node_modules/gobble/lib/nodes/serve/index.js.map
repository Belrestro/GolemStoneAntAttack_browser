{"version":3,"file":"index.js","sources":["../../../../../../src/nodes/serve/index.js"],"sourcesContent":["import { createServer } from 'http';\nimport { resolve } from 'path';\nimport { Promise } from 'sander';\nimport * as tinyLr from 'tiny-lr';\nimport cleanup from '../../utils/cleanup';\nimport session from '../../session';\nimport GobbleError from '../../utils/GobbleError';\nimport handleRequest from './handleRequest';\n\nexport default function serve ( node, options = {} ) {\n\tconst port = options.port || 4567;\n\tconst gobbledir = resolve( options.gobbledir || process.env.GOBBLE_TMP_DIR || '.gobble' );\n\tconst task = session.create({ gobbledir });\n\n\tlet buildStarted = Date.now();\n\tlet watchTask;\n\tlet srcDir;\n\tlet sourcemapPromises;\n\tlet server;\n\tlet serverReady;\n\tlet lrServer;\n\tlet lrServerReady;\n\tlet built = false;\n\tlet firedReadyEvent = false;\n\tlet error = { gobble: 'WAITING' };\n\n\ttask.resume = n => {\n\t\tnode = n;\n\t\twatchTask = node.createWatchTask();\n\n\t\twatchTask.on( 'info', details => task.emit( 'info', details ) );\n\n\t\twatchTask.on( 'error', err => {\n\t\t\terror = err;\n\t\t\ttask.emit( 'error', err );\n\t\t});\n\n\t\tlet buildStart;\n\t\twatchTask.on( 'build:start', () => buildStart = Date.now() );\n\n\t\twatchTask.on( 'build:end', dir => {\n\t\t\terror = null;\n\t\t\tsourcemapPromises = {};\n\t\t\tsrcDir = dir;\n\n\t\t\tbuilt = true;\n\n\t\t\ttask.emit( 'built' );\n\n\t\t\ttask.emit( 'info', {\n\t\t\t\tcode: 'BUILD_COMPLETE',\n\t\t\t\tduration: Date.now() - buildStart\n\t\t\t});\n\n\t\t\tif ( !firedReadyEvent && serverReady ) {\n\t\t\t\ttask.emit( 'ready' );\n\t\t\t\tfiredReadyEvent = true;\n\t\t\t}\n\n\t\t\tif ( !lrServerReady ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlrServer.changed({ body: { files: '*' } });\n\t\t});\n\t};\n\n\ttask.close = () => {\n\t\tif ( node ) {\n\t\t\tnode.stop();\n\t\t}\n\n\t\treturn new Promise( fulfil => {\n\t\t\tsession.destroy();\n\t\t\tserver.removeAllListeners();\n\t\t\tserver.close( fulfil );\n\t\t});\n\t};\n\n\ttask.pause = () => {\n\t\terror = { gobble: 'WAITING' };\n\n\t\tbuildStarted = Date.now();\n\n\t\tif ( node ) {\n\t\t\tnode.stop();\n\t\t}\n\n\t\tnode = null;\n\n\t\treturn cleanup( gobbledir );\n\t};\n\n\tserver = createServer();\n\n\tserver.on( 'error', err => {\n\t\tif ( err.code === 'EADDRINUSE' ) {\n\t\t\t// We need to create our own error, so we can pass along port info\n\t\t\terr = new GobbleError({\n\t\t\t\tport,\n\t\t\t\tcode: 'PORT_IN_USE',\n\t\t\t\tmessage: `port ${port} is already in use`\n\t\t\t});\n\t\t}\n\n\t\ttask.emit( 'error', err );\n\n\t\tprocess.exit( 1 );\n\t});\n\n\tserver.listen( port, () => {\n\t\tserverReady = true;\n\n\t\tif ( !firedReadyEvent && built ) {\n\t\t\ttask.emit( 'ready' );\n\t\t\tfiredReadyEvent = true;\n\t\t}\n\n\t\ttask.emit( 'info', {\n\t\t\tport,\n\t\t\tcode: 'SERVER_LISTENING'\n\t\t});\n\t});\n\n\tserver.on( 'request', ( request, response ) => {\n\t\thandleRequest( srcDir, error, sourcemapPromises, request, response )\n\t\t\t.catch( err => task.emit( 'error', err ) );\n\t});\n\n\tlrServer = tinyLr();\n\tlrServer.error = err => {\n\t\tif ( err.code === 'EADDRINUSE' ) {\n\t\t\ttask.emit( 'warning', 'a livereload server is already running (perhaps in a separate gobble process?). Livereload will not be available for this session' );\n\t\t} else {\n\t\t\ttask.emit( 'error', err );\n\t\t}\n\t};\n\n\tlrServer.listen( 35729, () => {\n\t\tlrServerReady = true;\n\t\ttask.emit( 'info', {\n\t\t\tcode: 'LIVERELOAD_RUNNING'\n\t\t});\n\t});\n\n\n\tcleanup( gobbledir ).then(\n\t\t() => task.resume( node ),\n\t\terr => task.emit( 'error', err )\n\t);\n\n\treturn task;\n}\n"],"names":[],"mappings":"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"}