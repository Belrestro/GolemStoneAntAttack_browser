{"version":3,"file":"serveFile.js","sources":["../../../../../../src/nodes/serve/serveFile.js"],"sourcesContent":["import { basename, extname } from 'path';\nimport { lookup } from 'mime';\nimport { readFile, stat, createReadStream } from 'sander';\nimport { getSourcemapComment, SOURCEMAP_COMMENT } from '../../utils/sourcemap';\n\nexport default function serveFile ( filepath, request, response ) {\n\tconst ext = extname( filepath );\n\n\t// this might be turn out to be a really bad idea. But let's try it and see\n\tif ( ext === '.js' || ext === '.css' ) {\n\t\treturn readFile( filepath ).then( data => {\n\t\t\t// this takes the auto-generated absolute sourcemap path, and turns\n\t\t\t// it into what you'd get with `gobble build` or `gobble watch`\n\t\t\tconst sourcemapComment = getSourcemapComment( basename( filepath ) + '.map', ext );\n\t\t\tdata = data.toString().replace( SOURCEMAP_COMMENT, sourcemapComment );\n\n\t\t\tresponse.statusCode = 200;\n\t\t\tresponse.setHeader( 'Content-Type', lookup( filepath ) );\n\n\t\t\tresponse.write( data );\n\t\t\tresponse.end();\n\t\t});\n\t}\n\n\treturn stat( filepath ).then( stats => {\n\t\tresponse.statusCode = 200;\n\t\tresponse.setHeader( 'Content-Type', lookup( filepath ) );\n\t\tresponse.setHeader( 'Content-Length', stats.size );\n\n\t\tcreateReadStream( filepath ).pipe( response );\n\t});\n}\n"],"names":[],"mappings":";;;;;;;;;qBAKwB;AAAT,SAAS,UAAY,UAAU,SAAS,UAAW;AACjE,CAAD,IAAO,kBAAa,CAAE;;;AAGrB,CAAD,IAAM,QAAQ,SAAS,QAAQ,QAAS;AACtC,EAAF,sBAAiB,CAAE,UAAW,KAAM,UAAA,MAAQ;;;AAGzC,GAAH,IAAS,gDAAsC,cAAU,CAAE,YAAa,QAAQ;AAC7E,GAAH,OAAU,KAAK,WAAW,mCAA0B,EAAE;;AAEnD,GAAH,SAAY,aAAa;AACtB,GAAH,SAAY,UAAW,2BAAsB,CAAE;;AAE5C,GAAH,SAAY,MAAO;AAChB,GAAH,SAAY;AACZ;AACA;;AAEC,CAAD,kBAAY,CAAE,UAAW,KAAM,UAAA,OAAS;AACtC,EAAF,SAAW,aAAa;AACtB,EAAF,SAAW,UAAW,2BAAsB,CAAE;AAC5C,EAAF,SAAW,UAAW,kBAAkB,MAAM;;AAE5C,yBAAgB,CAAE,UAAW,KAAM;AACrC;AACA"}