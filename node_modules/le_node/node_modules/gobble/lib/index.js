'use strict';

var path = require('path');
var nodes = require('./nodes');
var sander = require('sander');
var config = require('./config');
var chalk = require('chalk');
var is = require('./utils/is');

function fail() {
	throw new Error("could not process input. Usage:\n    node2 = gobble(node1)\n    node = gobble('some/dir')\n    node = gobble([node1, node2[, nodeN]) (inputs can also be strings)\n    See " + chalk.cyan("https://github.com/gobblejs/gobble/wiki") + " for more info.");
}

var sources = {};

function getNode(input, options) {
	if (input._gobble) {
		return input;
	}

	if (is.isArray(input)) {
		input = input.map(ensureNode);
		return new nodes.Merger(input, options);
	}

	if (is.isString(input)) {
		input = path.resolve(config['default'].cwd, input);
		return sources[input] || (sources[input] = new nodes.Source(input, options));
	}

	fail();
}

function ensureNode(input) {
	return getNode(input);
}

function gobble(input, options) {
	// gobble takes 1 or two arguments. The second must be an options object
	if (arguments.length > 2 || options && (typeof options !== "object" || options._gobble)) {
		fail();
	}

	return getNode(input, options);
}

gobble.env = function (env) {
	if (arguments.length) {
		config['default'].env = env;
	}

	return config['default'].env;
};

gobble.cwd = function () {
	if (arguments.length) {
		config['default'].cwd = path.resolve.apply(null, arguments);
	}

	return config['default'].cwd;
};

gobble.sander = sander;

exports['default'] = gobble;
//# sourceMappingURL=index.js.map
