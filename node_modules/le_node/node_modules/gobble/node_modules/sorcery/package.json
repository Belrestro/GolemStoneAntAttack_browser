{
  "name": "sorcery",
  "description": "Resolve a chain of sourcemaps back to the original source",
  "version": "0.6.1",
  "author": {
    "name": "Rich Harris"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Rich-Harris/sorcery.git"
  },
  "main": "dist/sorcery.js",
  "jsnext:main": "src/index.js",
  "license": "MIT",
  "dependencies": {
    "buffer-crc32": "^0.2.5",
    "minimist": "^1.1.0",
    "sander": "^0.2.2",
    "vlq": "^0.2.1"
  },
  "devDependencies": {
    "babel": "^5.1.10",
    "browserify": "^9.0.8",
    "coffee-script": "^1.9.2",
    "esperanto": "^0.6.29",
    "gobble": "^0.10.1",
    "gobble-babel": "^5.0.0",
    "gobble-cli": "^0.4.2",
    "gobble-rollup": "^0.1.1",
    "less": "^2.5.0",
    "mocha": "^2.1.0",
    "promise-map-series": "^0.2.1",
    "source-map": "^0.1.40",
    "source-map-support": "^0.2.10",
    "uglify-js": "^2.4.20"
  },
  "bin": {
    "sorcery": "bin/index.js"
  },
  "scripts": {
    "build": "gobble build -f dist",
    "pretest": "npm run build",
    "prepare-tests": "node test/samples/prepare-tests.js",
    "test": "mocha",
    "prepublish": "npm test"
  },
  "files": [
    "src/",
    "dist/",
    "bin/",
    "README.md"
  ],
  "readme": "# sorcery.js\n\nSourcemaps are great - if you have a JavaScript file, and you minify it, your minifier can generate a map that lets you debug as though you were looking at the original uncompressed code.\n\nBut if you have more than one transformation - say you want to transpile your JavaScript, concatenate several files into one, and minify the result - it gets a little trickier. Each intermediate step needs to be able to both *ingest* a sourcemap and *generate* one, all the time pointing back to the original source.\n\nMost compilers don't do that. ([UglifyJS](https://github.com/mishoo/UglifyJS2) is an honourable exception.) So when you fire up devtools, instead of looking at the original source you find yourself looking at the final intermediate step in the chain of transformations.\n\n**Sorcery aims to fix that.** Given an file at the end of a transformation chain (e.g., your minified JavaScript), it will follow the entire chain back to the original source, and generate a new sourcemap that describes the whole process. How? Magic.\n\nThis is a work-in-progress - suitable for playing around with, but don't rely on it to debug air traffic control software or medical equipment. Other than that, it can't do much harm.\n\n\n## Usage\n\n### As a node module\n\nInstall sorcery locally:\n\n```bash\nnpm install sorcery\n```\n\n```js\nvar sorcery = require( 'sorcery' );\n\nsorcery.load( 'some/generated/code.min.js' ).then( function ( chain ) {\n  // generate a flattened sourcemap\n  var map = chain.apply(); // { version: 3, file: 'code.min.js', ... }\n\n  // get a JSON representation of the sourcemap\n  map.toString(); // '{\"version\":3,\"file\":\"code.min.js\",...}'\n\n  // get a data URI representation\n  map.toUrl(); // 'data:application/json;charset=utf-8;base64,eyJ2ZXJ...'\n\n  // write to a new file - this will create `output.js` and\n  // `output.js.map`, and will preserve relative paths. It\n  // returns a Promise\n  chain.write( 'output.js' );\n\n  // write to a new file but use an absolute path for the\n  // sourceMappingURL\n  chain.write( 'output.js', { absolutePath: true });\n\n  // write to a new file, but append the flattened sourcemap as a data URI\n  chain.write( 'output.js', { inline: true });\n\n  // overwrite the existing file\n  chain.write();\n  chain.write({ inline: true });\n\n  // find the origin of line x, column y. Returns an object with\n  // `source`, `line`, `column` and (if applicable) `name` properties.\n  // Note - for consistency with other tools, line numbers are always\n  // one-based, column numbers are always zero-based. It's daft, I know.\n  var loc = chain.trace( x, y );\n});\n\n// You can also use sorcery synchronously:\nvar chain = sorcery.loadSync( 'some/generated/code.min.js' );\nvar map = chain.apply();\nvar loc = chain.trace( x, y );\n```\n\n#### Advanced options\n\nYou can pass an optional second argument to `sorcery.load()` and `sorcery.loadSync()`, with zero or more of the following properties:\n\n* `content` - a map of `filename: contents` pairs. `filename` will be resolved against the current working directory if needs be\n* `sourcemaps` - a map of `filename: sourcemap` pairs, where `filename` is the name of the file the sourcemap is related to. This will override any `sourceMappingURL` comments in the file itself.\n\nFor example:\n\n```js\nsorcery.load( 'some/generated/code.min.js', {\n  content: {\n    'some/minified/code.min.js': '...',\n    'some/transpiled/code.js': '...',\n    'some/original/code.js': '...'\n  },\n  sourcemaps: {\n    'some/minified/code.min.js': {...},\n    'some/transpiled/code.js': {...}\n  }\n}).then( chain => {\n  /* ... */\n});\n```\n\nAny files not found will be read from the filesystem as normal.\n\n### On the command line\n\nFirst, install sorcery globally:\n\n```bash\nnpm install -g sorcery\n```\n\n```\nUsage:\n  sorcery [options]\n\nOptions:\n  -h, --help               Show help message\n  -v, --version            Show version\n  -i, --input <file>       Input file\n  -o, --output <file>      Output file (if absent, will overwrite input)\n  -d, --datauri            Append map as a data URI, rather than separate file\n  -x, --excludeContent     Don't populate the sourcesContent array\n```\n\nExamples:\n\n```bash\n# overwrite sourcemap in place (will write map to\n# some/generated/code.min.js.map, and update\n# sourceMappingURL comment if necessary\nsorcery -i some/generated/code.min.js\n\n# append flattened sourcemap as an inline data URI\n# (will delete existing .map file, if applicable)\nsorcery -d -i some/generated/code.min.js\n\n# write to a new file (will create newfile.js and\n# newfile.js.map)\nsorcery -i some/generated/code.min.js -o newfile.js\n```\n\n\n## License\n\nMIT\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/Rich-Harris/sorcery/issues"
  },
  "homepage": "https://github.com/Rich-Harris/sorcery#readme",
  "_id": "sorcery@0.6.1",
  "_shasum": "a5826d14cc1d32be04773cc828316299383abadf",
  "_resolved": "https://registry.npmjs.org/sorcery/-/sorcery-0.6.1.tgz",
  "_from": "https://registry.npmjs.org/sorcery/-/sorcery-0.6.1.tgz"
}
