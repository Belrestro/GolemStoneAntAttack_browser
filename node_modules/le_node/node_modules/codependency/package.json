{
  "name": "codependency",
  "keywords": [
    "peer",
    "dependency",
    "dependencies",
    "require",
    "module",
    "semver"
  ],
  "version": "0.1.3",
  "description": "Optional peer dependencies",
  "main": "index.js",
  "dependencies": {
    "semver": "2.2.1"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Wizcorp/codependency.git"
  },
  "author": {
    "name": "Ron Korving",
    "email": "rkorving@wizcorp.jp"
  },
  "license": "MIT",
  "readme": "# Optional Peer Dependencies for Node.js middleware\n\n## Description\n\nNode's peer dependencies are automatically installed when the middleware that refers to them is\ninstalled. Just because your middleware supports 16 database systems, doesn't mean your end user\nwants to install all those drivers.\n\nFor those cases, you'll want to use `codependency`. Simply add your peer dependencies to your\n`package.json` file, in a field called `\"optionalPeerDependencies\"` and use the `require()`\nfunction from this library. It will give you:\n\n* automatic semver validation.\n* instructive error reporting for your end user.\n* optionality (it won't throw errors if you don't want it to).\n* a developer-friendly environment (allows symlinking to your middleware).\n\n## Installation\n\n```sh\nnpm install codependency\n```\n\n## Usage\n\n### The shortest usage example\n\nMiddleware package.json\n\n```json\n{\n  \"name\": \"mymiddleware\",\n  \"optionalPeerDependencies\": {\n    \"redis\": \"~0.9.0\",\n    \"mysql\": \"~2.0.0\"\n  }\n}\n```\n\nSetting up and using a require-function from the middleware\n\n```javascript\nvar codependency = require('codependency');\nvar requirePeer = codependency.register(module);\n\nvar redis = requirePeer('redis');\n```\n\nFrom another file, you can now easily use the middleware's require function for peers:\n\n```javascript\nvar codependency = require('codependency');\nvar requirePeer = codependency.get('mymiddleware');\n\nvar redis = requirePeer('redis');\n```\n\n## Advanced usage\n\n```javascript\nvar codependency = require('codependency');\nvar requirePeer = codependency.register(module, {\n\tindex: ['optionalPeerDependencies', 'devDependencies']\n});\n\n// require redis, but don't throw an error if the module is not found\n\nvar redis = requirePeer('redis', { optional: true }); // returns undefined\n```\n\n## API\n\n**codependency.register(module, options)**\n\nThe `module` argument must be the root module of the middleware. Its location is the basis for the\nsearch for `package.json`, which is to contain the peer dependencies hashmap. Its parent will be\nused to require from. This allows you to work on middleware development, while symlinking to it\nfrom your end-user project. For example:\n\n\t/home/bob/todolist/node_modules/mymiddleware -> /home/bob/mymiddleware\n\nThe `options` object may contain an `index` property, which defaults to the array\n[\"optionalPeerDependencies\"]. Override it to change which properties of your package.json will be\nused to index.\n\nThis function returns a `require` function, which has the following signature:\n\n**requirePeer(name, options)**\n\nThe `name` argument is the name of one of your peer dependencies. It will be required and returned.\nThe `options` object may contain one of the following:\n\n* optional: boolean (default: false), in order to not throw an error if the module cannot be found.\n* dontThrow: boolean (default: false), in order to not throw an error if the module's version did\n  not satisfy the requirement or something else went wrong during the require.\n\nIt also has a resolve method which can give you information about a peer dependency before requiring\nit.\n\n**requirePeer.resolve(name)**\n\nThe `name` argument is the name of one of your peer dependencies. The returned object has the\nfollowing signature:\n\n```json\n{\n  \"supportedRange\": \"2.5.1\",\n  \"installedVersion\": \"2.5.1\",\n  \"isInstalled\": true,\n  \"isValid\": true,\n  \"pkgPath\": \"zmq/package.json\"\n}\n```\n\n* `supportedRange` is the range that the middleware explicitly supports.\n* `installedVersion` is the version that is currently installed (null if none).\n* `isInstalled` indicates if the dependency has been installed.\n* `isValid` indicates if the installed version is valid within the supported range.\n* `pkgPath` is a path to package.json of the dependency, used internally by `requirePeer()`.\n\n## Errors\n\nDuring a peer-require, a user may encounter the following exceptions:\n\n* Module \"redis\" required by \"mymiddleware\" not found. Please run: npm install redis@'~0.10.0' --save\n* Module \"mysql\" required by \"mymiddleware\" has no version information in \"mysql/package.json\".\n* Version of module \"couchbase\" required by \"mymiddleware\" is not a string (found instead: number).\n* Version \"2.3.0\" of module \"zmq\" required by \"mymiddleware\" does not satisfy required range \"~2.5.0\".\n\n",
  "readmeFilename": "Readme.md",
  "bugs": {
    "url": "https://github.com/Wizcorp/codependency/issues"
  },
  "homepage": "https://github.com/Wizcorp/codependency#readme",
  "_id": "codependency@0.1.3",
  "_shasum": "69aed841be6f931829a07273ef8ebbe8407bd1b6",
  "_resolved": "https://registry.npmjs.org/codependency/-/codependency-0.1.3.tgz",
  "_from": "https://registry.npmjs.org/codependency/-/codependency-0.1.3.tgz"
}
