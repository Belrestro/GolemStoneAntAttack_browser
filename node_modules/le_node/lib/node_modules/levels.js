'use strict';

var _Object$defineProperty = require('babel-runtime/core-js/object/define-property')['default'];

var _Number$isInteger = require('babel-runtime/core-js/number/is-integer')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

_Object$defineProperty(exports, '__esModule', {
	value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _defaults = require('defaults');

var defaults = _interopRequireWildcard(_defaults);

var _text = require('text');

var _text2 = _interopRequireDefault(_text);

var _error = require('error');

var isNumberValid = function isNumberValid(n) {
	return _Number$isInteger(parseFloat(n)) && _lodash2['default'].inRange(n, 8);
};

exports.isNumberValid = isNumberValid;

var normArr = function normArr(arr, opts) {
	if (arr.length > 8) throw new _error.BadOptionsError(opts, _text2['default'].tooManyLevels(arr.length));

	return arr.map(function (val) {
		if (val && _lodash2['default'].isString(val)) return val;
		if (_lodash2['default'].isNumber(val) && isFinite(val)) return val.toString();
		if (_lodash2['default'].isNull(val) || _lodash2['default'].isUndefined(val)) return;

		throw new _error.BadOptionsError(opts, _text2['default'].levelNotString(val));
	});
};

var normObj = function normObj(obj, opts) {
	var lvlNums = _lodash2['default'].values(obj);

	var _iteratorNormalCompletion = true;
	var _didIteratorError = false;
	var _iteratorError = undefined;

	try {
		for (var _iterator = _getIterator(lvlNums), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
			var num = _step.value;

			if (!isNumberValid(num)) throw new _error.BadOptionsError(opts, _text2['default'].invalidLevelNum(num));
		}
	} catch (err) {
		_didIteratorError = true;
		_iteratorError = err;
	} finally {
		try {
			if (!_iteratorNormalCompletion && _iterator['return']) {
				_iterator['return']();
			}
		} finally {
			if (_didIteratorError) {
				throw _iteratorError;
			}
		}
	}

	var duplicates = (0, _lodash2['default'])(obj).countBy().pick(function (lvl) {
		return lvl > 1;
	}).keys().value();

	if (duplicates.length) throw new _error.BadOptionsError(opts, _text2['default'].duplicateLevelNums(duplicates));

	return _lodash2['default'].reduce(obj, function (arr, i, name) {
		arr[i] = name;
		return arr;
	}, []);
};

var normalize = function normalize(opts) {

	var custom = opts.levels;

	if (!_lodash2['default'].isUndefined(custom) && !_lodash2['default'].isNull(custom) && !_lodash2['default'].isObject(custom)) throw new _error.BadOptionsError(opts, _text2['default'].levelsNotObj(typeof custom));

	if (!custom) return defaults.levels.slice();

	custom = _lodash2['default'].isArray(custom) ? normArr(custom, opts) : normObj(custom, opts);

	var levels = defaults.levels.map(function (lvl, i) {
		return custom[i] || lvl;
	});

	var duplicates = (0, _lodash2['default'])(levels).countBy().pick(function (count) {
		return count > 1;
	}).keys().value();

	if (duplicates.length) throw new _error.BadOptionsError(opts, _text2['default'].duplicateLevels(duplicates));

	return levels;
};
exports.normalize = normalize;
//# sourceMappingURL=levels.js.map
